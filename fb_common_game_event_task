CREATE OR REPLACE PROCEDURE `gzdw2024.gz_dim.fb_common_game_event_task`(run_date DATE, history_day INT64, history_retain_day INT64, history_end_day INT64)
begin


-------0.dwd_common_game_user_event_di
delete `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day)
;
--drop table if exists `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`;
--create table `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`
--	PARTITION BY event_date as 
insert `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`
	SELECT 
		event_name
		,case when stream_id ='9692329810' then 'fb.ai.avatar.puzzle' 
        when stream_id ='9817620337' then 'fb.zp' 
		when stream_id ='9900250753' then 'fb.otme.fate.quest' 
		when stream_id ='9985702455' then 'fb.fruit.bubble' 
		else 'other'  end  as package_name
		,PARSE_DATE('%Y%m%d',event_date) event_date
    	,stream_id
		,user_pseudo_id
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='eventTime') eventTime		
		,COALESCE((SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='fbUserID')
			,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='userId')
			,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='fbUserId')
		 ) user_id 
		,event_timestamp
		,ifnull(country_code,geo.country) as country_code
		,device.category as device_category
		,device.mobile_brand_name
		,device.mobile_model_name
		,device.mobile_marketing_name
		,device.operating_system as operating_system
		,device.operating_system_version
		,device.language
	   	,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='isFirst') isFirst 
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='type') type 
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='from') fromon 
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='fromUser') fromUser 
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='abtestVersion') abtestVersion
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='placement') placement
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='timeuse') timeuse
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='steps') steps
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='error') error_code
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='win') win
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='hidesum') hidesum
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='level') level_id
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='gameID') gameID
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='gameShowTime') gameShowTime
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='code') e_code
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='score') score
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='coinsum') coinsum
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='starsum') starsum
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='livesum') livesum
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='proptype') proptype
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='propsum') propsum
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='buytype') buytype
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='entrance') entrance
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='id') cat_id
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='proplist') proplist
		,(SELECT COALESCE(cast(value.int_value as string),cast(value.string_value as string),cast(value.float_value as string),cast(value.double_value as string)) FROM UNNEST(event_params) WHERE key='propselect') propselect
	FROM `recorder-pro-50451.analytics_250268757.events_*` a 
	left join
			    (
			    SELECT 
			      upper(country_name) as country_name
			      ,max(country_code) as country_code
			    FROM `gzdw2024.gz_dim.country_info` 
					group by upper(country_name)
			    )c 
			    on upper(a.geo.country)=c.country_name
	WHERE 1=1
	 and  stream_id in('9692329810','9817620337','9900250753','9985702455')
	and _TABLE_SUFFIX >=replace(cast(date_add(run_date,interval -history_day day) as string),'-','')
	and  _TABLE_SUFFIX <=replace(cast(date_add(run_date,interval -history_end_day day) as string),'-','')
	 ;
	





-------1.dwd_common_game_user_active_di
delete `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_di`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);


insert `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_di`
	--drop table if exists `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_di`;
--create table `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_di`
--	PARTITION BY event_date as 
SELECT 
	event_date
	,user_id
	,package_name
	,MIN_BY(country_code, event_timestamp) AS country_code
	,max(fromUser) as fromUser
	,MIN_BY(operating_system, event_timestamp) AS operating_system
FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`
WHERE 1=1
and event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day)
group by event_date
	,user_id
	,package_name;


-------2.dwd_common_game_user_active_profile_di
delete `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
where event_date>=date_add(run_date,interval -history_retain_day day)
and event_date<=date_add(run_date,interval -history_end_day day);

insert `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
		--drop table if exists `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`;
--create table `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
--	PARTITION BY event_date as 
SELECT
	a.user_id
	,a.event_date	
	,max(is_launch) as is_launch
	,max(case when a.event_date=event_date_min  then 1 else 0 end ) as is_new
	,max(is_ad) as is_ad
	,max(is_liebian) as is_liebian
	,a.package_name
	,a.country_code
	,a.operating_system
FROM
	(
	SELECT
		user_id
		,event_date
		,package_name
		,max(country_code) as country_code
		,max(operating_system) as operating_system
	FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_di`
	WHERE event_date>=date_add(run_date,interval -history_retain_day day)
	and event_date<=date_add(run_date,interval -history_end_day day)
	group by user_id,package_name,event_date
	)a 
	join
	(
	 SELECT 
	 	user_id
	 	,package_name
	 	,event_date
	 	,max(case when event_name  like '%app_launch%'  then 1 else 0 end) as is_launch
	 	,max(case when event_name  like '%app_launch%' and isFirst='true' then 1 else 0 end) as is_new
	 	,max(case when event_name  like '%app_launch%' and fromon='ad' then 1 else 0 end) as is_ad
	 	,max(case  when event_name like '%app_launch%' and fromon in ('shareable_link','feed') then 1 else 0 end) as is_liebian
	 FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di` 
	 where 1=1
	 and event_date>=date_add(run_date,interval -history_retain_day day)
	 and event_date<=date_add(run_date,interval -history_end_day day)
	 group by user_id,event_date,package_name
	)b 
	on a.user_id=b.user_id
	and a.event_date=b.event_date
	and a.package_name=b.package_name
	left join 
	(
	SELECT
		user_id
		,min(event_date) as event_date_min
		,package_name
	FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`
	WHERE event_date>=date_add(run_date,interval -(history_retain_day +150) day)
	and event_date<=date_add(run_date,interval -history_end_day day)
	group by user_id,package_name
	)c 
	on a.user_id=c.user_id
	and a.package_name=c.package_name
	group by a.user_id,a.event_date,a.package_name,a.country_code,a.operating_system;

----------3.活跃、新增、广告新增、裂变新增


delete `gzdw2024.fbgame_01_basic.dws_common_game_user_active_report`
where event_date>=date_add(run_date,interval -history_retain_day day)
and event_date<=date_add(run_date,interval -history_end_day day);

insert `gzdw2024.fbgame_01_basic.dws_common_game_user_active_report`
	--create table `gzdw2024.fbgame_01_basic.dws_common_game_user_active_report`
	--PARTITION BY event_date as 
		SELECT
			a.event_date
			,a.package_name	
			,country_code
			,platform
			,count(distinct case when is_launch=1 then a.user_id else null end) as active_uv 
			,count(distinct case when is_launch=1 and is_new=1 then a.user_id else null end) as new_uv
			,count(distinct case when is_launch=1 and is_new=1 and is_ad=1 then a.user_id else null end) as new_ad_uv
			,count(distinct case when is_launch=1 and is_new=1 and is_ad=0 and  is_liebian=1  then a.user_id else null end) as new_liebian_uv 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=1 and is_new=1 then a.user_id else null end) as retain_uv2 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=2 and is_new=1 then a.user_id else null end) as retain_uv3 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=3 and is_new=1 then a.user_id else null end) as retain_uv4 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=4 and is_new=1 then a.user_id else null end) as retain_uv5 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=5 and is_new=1 then a.user_id else null end) as retain_uv6 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=6 and is_new=1 then a.user_id else null end) as retain_uv7 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=7 and is_new=1 then a.user_id else null end) as retain_uv8 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=14 and is_new=1 then a.user_id else null end) as retain_uv15 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=28 and is_new=1 then a.user_id else null end) as retain_uv29
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=1 and is_new=1  and is_ad=1 then a.user_id else null end) as retain_ad_uv2 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=2 and is_new=1  and is_ad=1 then a.user_id else null end) as retain_ad_uv3 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=3 and is_new=1  and is_ad=1 then a.user_id else null end) as retain_ad_uv4 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=4 and is_new=1  and is_ad=1 then a.user_id else null end) as retain_ad_uv5 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=5 and is_new=1  and is_ad=1 then a.user_id else null end) as retain_ad_uv6 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=6 and is_new=1  and is_ad=1 then a.user_id else null end) as retain_ad_uv7 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=7 and is_new=1  and is_ad=1 then a.user_id else null end) as retain_ad_uv8 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=14 and is_new=1  and is_ad=1 then a.user_id else null end) as retain_ad_uv15 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=28 and is_new=1  and is_ad=1 then a.user_id else null end) as retain_ad_uv29
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=1 and is_new=1 and is_ad=0 and  is_liebian=1  then a.user_id else null end) as retain_liebian_uv2 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=2 and is_new=1 and is_ad=0 and  is_liebian=1  then a.user_id else null end) as retain_liebian_uv3 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=3 and is_new=1 and is_ad=0 and  is_liebian=1  then a.user_id else null end) as retain_liebian_uv4 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=4 and is_new=1 and is_ad=0 and  is_liebian=1  then a.user_id else null end) as retain_liebian_uv5 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=5 and is_new=1 and is_ad=0 and  is_liebian=1  then a.user_id else null end) as retain_liebian_uv6 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=6 and is_new=1 and is_ad=0 and  is_liebian=1  then a.user_id else null end) as retain_liebian_uv7 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=7 and is_new=1 and is_ad=0 and  is_liebian=1  then a.user_id else null end) as retain_liebian_uv8 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=14 and is_new=1 and is_ad=0 and  is_liebian=1  then a.user_id else null end) as retain_liebian_uv15 
			,count(distinct case when  date_diff(b.event_date,a.event_date,day)=28 and is_new=1 and is_ad=0 and  is_liebian=1  then a.user_id else null end) as retain_liebian_uv29
			,count(distinct case when is_launch=1 and is_new=1 and is_ad=1    then c.user_id else null end) as source_liebian_uv_ad 
			,count(distinct case when is_launch=1 and is_new=1 and is_ad=1 and date_diff(c.event_date_min,a.event_date,day)<=0  then c.user_id else null end) as source_liebian_uv_ad_0_day 
			,count(distinct case when is_launch=1 and is_new=1 and is_ad=1 and date_diff(c.event_date_min,a.event_date,day)<=1  then c.user_id else null end) as source_liebian_uv_ad_1_day
			,count(distinct case when is_launch=1 and is_new=1 and is_ad=1 and  date_diff(c.event_date_min,a.event_date,day)<=2  then c.user_id else null end) as source_liebian_uv_ad_2_day 
			,
		FROM
			(			
			SELECT
				event_date
				,user_id
				,is_launch
				,is_new
				,is_ad
				,is_liebian
				,array[country_code,'TOTAL'] as country_code
				,array[case when operating_system ='iOS' then 'iOS'
				when operating_system ='Android' then 'Android' 
				else 'web' end,'TOTAL']  as platform
				,package_name
			FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
			WHERE event_date>=date_add(run_date,interval -history_retain_day day)
			and event_date<=date_add(run_date,interval -history_end_day day)	
		    )a 
			left join
			(
			SELECT
				event_date
				,user_id
				,package_name
			FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
			WHERE event_date>=date_add(run_date,interval -history_retain_day day)
			and event_date<=date_add(run_date,interval -history_end_day day)
			group by event_date,user_id,package_name
			)b 
			on a.user_id=b.user_id
			and a.package_name=b.package_name
			left join
			(
			SELECT
				user_id
				,package_name
				,MIN_BY(fromUser, event_date) AS fromUser
				,min(event_date) as event_date_min
			FROM
				(
				SELECT
					event_date
					,user_id
					,max(fromUser) as fromUser
					,package_name
	 			FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_di` 
				WHERE event_date>=date_add(run_date,interval -history_retain_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				group by event_date,user_id,package_name
				)a 
				group by user_id,package_name			
			)c
			on a.user_id=c.fromUser
			and a.package_name=c.package_name
			,UNNEST(country_code) as country_code
			,UNNEST(platform) as platform
			group by a.event_date,country_code,platform,package_name;




------4.各事件活跃次数与人数

delete `gzdw2024.fbgame_01_basic.dws_common_game_event_active_report`
where stats_date>=date_add(run_date,interval -history_day day)
and stats_date<=date_add(run_date,interval -history_end_day day);


insert `gzdw2024.fbgame_01_basic.dws_common_game_event_active_report`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_common_game_event_active_report`;
	--create table  `gzdw2024.fbgame_01_basic.dws_common_game_event_active_report`
	--PARTITION BY stats_date as 
	SELECT
		c0.event_date  AS stats_date
		,c0.package_name
		,c0.platform
		,c0.country_code
		,is_new
		,event_name
		,pv 
		,uv 
		,case when is_new='TOTAL' then  active_uv  when is_new='new' then  new_uv
	when is_new='old' then active_uv -  new_uv end as active_uv
	FROM
		(
		SELECT
			event_date
			,package_name
			,platform
			,country_code
			,event_name
			,is_new
			,count(1) as pv 
			,count(distinct user_id) as uv 
		FROM
			(
			SELECT
				a.event_date
				,a.package_name
				,a.user_id 
				,event_name
				,platform
				,country_code
				,ARRAY['TOTAL',case when is_new =1 then 'new'
				when is_new =0 then 'old' 
				else 'old' end] as is_new	
			FROM
				(
				SELECT
					 event_date
					,user_id
					,ARRAY['TOTAL',country_code] as country_code
					,array[case when operating_system ='iOS' then 'iOS'
					when operating_system ='Android' then 'Android' 
					else 'web' end,'TOTAL']  as platform					
					,package_name
					,event_name
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`  
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				)a 
			 left	join 
				(
				SELECT
					package_name
					,event_date
					,user_id
					,max(is_new) as is_new
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				group by event_date,user_id,package_name
			   )b 
				on a.user_id=b.user_id
				and a.package_name=b.package_name
				and a.event_date=b.event_date
				,UNNEST(platform) AS platform
				,UNNEST(country_code) AS country_code
				
				)c 
				,UNNEST(is_new) AS is_new
			group by event_date
			,package_name
			,platform
			,country_code
			,event_name
			,is_new
			)c0 
			left join
			(
			SELECT
				event_date
				,package_name
				,platform
				,country_code
				,active_uv
				,new_uv
			FROM	`gzdw2024.fbgame_01_basic.dws_common_game_user_active_report`
			WHERE event_date>=date_add(run_date,interval -history_day day)
			and event_date<=date_add(run_date,interval -history_end_day day)

			)c1 
			on c0.event_date=c1.event_date
			and c0.platform=c1.platform
			and c0.country_code=c1.country_code
			and c0.package_name=c1.package_name;


------4.1乙游事件
delete `gzdw2024.fbgame_01_basic.dws_common_fq_event_active_report`
where stats_date>=date_add(run_date,interval -history_day day)
and stats_date<=date_add(run_date,interval -history_end_day day);

insert `gzdw2024.fbgame_01_basic.dws_common_fq_event_active_report`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_common_fq_event_active_report`;
--	create table  `gzdw2024.fbgame_01_basic.dws_common_fq_event_active_report`
--	PARTITION BY stats_date as 
	SELECT
		* 
	FROM `gzdw2024.fbgame_01_basic.dws_common_game_event_active_report`
	WHERE 1=1
	and stats_date>=date_add(run_date,interval -history_day day)
	and stats_date<=date_add(run_date,interval -history_end_day day)
	and package_name='fb.otme.fate.quest';


------4.2纸牌事件
delete `gzdw2024.fbgame_01_basic.dws_common_zp_event_active_report`
where stats_date>=date_add(run_date,interval -history_day day)
and stats_date<=date_add(run_date,interval -history_end_day day);

insert `gzdw2024.fbgame_01_basic.dws_common_zp_event_active_report`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_common_zp_event_active_report`;
--	create table  `gzdw2024.fbgame_01_basic.dws_common_zp_event_active_report`
--	PARTITION BY stats_date as 
	SELECT
		* 
	FROM `gzdw2024.fbgame_01_basic.dws_common_game_event_active_report`
	WHERE 1=1
	and stats_date>=date_add(run_date,interval -history_day day)
	and stats_date<=date_add(run_date,interval -history_end_day day)
	and package_name='fb.zp';



------4.3 oho事件
delete `gzdw2024.fbgame_01_basic.dws_common_oho_event_active_report`
where stats_date>=date_add(run_date,interval -history_day day)
and stats_date<=date_add(run_date,interval -history_end_day day);

insert `gzdw2024.fbgame_01_basic.dws_common_oho_event_active_report`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_common_oho_event_active_report`;
--	create table  `gzdw2024.fbgame_01_basic.dws_common_oho_event_active_report`
--	PARTITION BY stats_date as 
	SELECT
		* 
	FROM `gzdw2024.fbgame_01_basic.dws_common_game_event_active_report`
	WHERE 1=1
	and stats_date>=date_add(run_date,interval -history_day day)
	and stats_date<=date_add(run_date,interval -history_end_day day)
	and package_name='fb.ai.avatar.puzzle';

------4.4 水果泡事件
delete `gzdw2024.fbgame_01_basic.dws_common_fruit_event_active_report`
where stats_date>=date_add(run_date,interval -history_day day)
and stats_date<=date_add(run_date,interval -history_end_day day);

insert `gzdw2024.fbgame_01_basic.dws_common_fruit_event_active_report`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_common_fruit_event_active_report`;
--	create table  `gzdw2024.fbgame_01_basic.dws_common_fruit_event_active_report`
--	PARTITION BY stats_date as 
	SELECT
		* 
	FROM `gzdw2024.fbgame_01_basic.dws_common_game_event_active_report`
	WHERE 1=1
	and stats_date>=date_add(run_date,interval -history_day day)
	and stats_date<=date_add(run_date,interval -history_end_day day)
	and package_name='fb.fruit.bubble';


----------------5.事件参数明细

delete `gzdw2024.fbgame_01_basic.dws_common_game_events_detail`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);

	insert `gzdw2024.fbgame_01_basic.dws_common_game_events_detail`
	--drop table if exists  `gzdw2024.fbgame_01_basic.dws_common_game_events_detail`;
--	create table  `gzdw2024.fbgame_01_basic.dws_common_game_events_detail`
--	PARTITION BY event_date as 
	  with a as 
	  (
  		SELECT
  			event_date
  			,package_name
  			,user_id
  			,event_name
			,platform
			,country_code
			,is_new
			,fromon
			,error_code
			,e_code
			,win
			,level_id
			,cat_id
			,buytype
		FROM
			(	
			SELECT
				a.event_date
				,a.package_name
				,a.user_id 
				,event_name
				,platform
				,country_code
				,ARRAY['TOTAL',case when is_new =1 then 'new'
				when is_new =0 then 'old' 
				else 'old' end] as is_new
				,fromon
				,error_code
				,e_code
				,win
				,level_id
				,cat_id
				,buytype
			FROM
				(
				SELECT
					 event_date
					,user_id
					,ARRAY['TOTAL',country_code] as country_code
					,array[case when operating_system ='iOS' then 'iOS'
					when operating_system ='Android' then 'Android' 
					else 'web' end,'TOTAL']  as platform					
					,package_name
					,event_name
					,fromon
					,error_code
					,e_code
					,win
					,level_id
					,cat_id
					,buytype
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`  
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				and event_name in (
					'otme_app_launch'
					,'otme_share_click'
					,'otme_game_show'
					,'otme_game_click'
					,'otme_game_start'
					,'otme_game_keep'
					,'otme_game_finish'
					,'otme_game_back'
					,'otme_changeface_start'
					,'otme_changeface_succ'
					,'otme_changeface_fail'
					,'otme_change_switch'
					,'fb_zp_game_play_finish'
					,'fb_zp_app_launch'
					,'fb_zp_app_launch'
					,'fb_templ_res_show'
					,'fb_templ_res_click'
					,'fb_templ_res_export'
					,'fb_templ_res_share'
					,'fb_templ_categ_show'
					,'fb_templ_categ_click'
					,'fb_templ_categ_export'
					,'fb_templ_categ_share'
					,'fb_fruit_shop_buyprop'
					,'fb_fruit_app_launch'
					,'fb_app_launch'

						)
				)a 
			 left	join 
				(
				SELECT
					package_name
					,event_date
					,user_id
					,max(is_new) as is_new
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				group by event_date,user_id,package_name
			   )b 
				on a.user_id=b.user_id
				and a.package_name=b.package_name
				and a.event_date=b.event_date
				,UNNEST(platform) AS platform
				,UNNEST(country_code) AS country_code
				
				)c 
				,UNNEST(is_new) AS is_new
			),
	  	 transformed_data AS (
				  SELECT
				    event_name
				    ,event_date
				    ,package_name
				    ,platform
				    ,country_code
				    ,is_new
				    ,key_value.key AS event_key        
				    ,key_value.value AS event_value
				    ,COUNT(*) AS event_num
				    ,COUNT(DISTINCT user_id) AS user_num
				  FROM
				    a,
				    UNNEST([
				      STRUCT('fromon' AS key, fromon AS value),
				      STRUCT('error_code' AS key, error_code AS value),
				      STRUCT('e_code' AS key, e_code AS value),
				      STRUCT('win' AS key, win AS value),
				      STRUCT('level_id' AS key, level_id AS value),
				      STRUCT('cat_id' AS key, cat_id AS value),
				      STRUCT('buytype' AS key, cat_id AS value)
				    ]) AS key_value
				  GROUP BY event_name, event_date, event_key, event_value,package_name,country_code,platform,is_new
				)
	  	 		SELECT
					c0.event_date
					,c0.package_name
					,c0.country_code
					,c0.platform
					,c0.is_new
					,c0.event_name
					,event_key
					,event_value
					,event_num
					,user_num
					,active_uv
				FROM
					(
					SELECT
						event_date
						,package_name
						,country_code
						,platform
						,is_new
						,event_name
						,event_key
						,event_value
						,event_num
						,user_num
					FROM
					    transformed_data
					  )c0
						 left join
						(
						SELECT
							stats_date
							,package_name
							,platform
							,country_code
							,is_new
							,event_name
							,active_uv
						FROM	`gzdw2024.fbgame_01_basic.dws_common_oho_event_active_report`
						WHERE stats_date>=date_add(run_date,interval -history_day day)
						and stats_date<=date_add(run_date,interval -history_end_day day)
						)c2 
						on c0.event_date=c2.stats_date
						and c0.platform=c2.platform
						and c0.country_code=c2.country_code
						AND c0.package_name=c2.package_name
						and c0.is_new=c2.is_new
						and c0.event_name=c2.event_name;




------5.1乙游事件明细
delete `gzdw2024.fbgame_01_basic.dws_common_fq_events_detail`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);

insert `gzdw2024.fbgame_01_basic.dws_common_fq_events_detail`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_common_fq_events_detail`;
	--create table  `gzdw2024.fbgame_01_basic.dws_common_fq_events_detail`
	--PARTITION BY event_date as 
	SELECT
		* 
	FROM `gzdw2024.fbgame_01_basic.dws_common_game_events_detail`
	WHERE 1=1
	and event_date>=date_add(run_date,interval -history_day day)
	and event_date<=date_add(run_date,interval -history_end_day day)
	and package_name='fb.otme.fate.quest';


------5.2纸牌事件明细
delete `gzdw2024.fbgame_01_basic.dws_common_zp_events_detail`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);

insert `gzdw2024.fbgame_01_basic.dws_common_zp_events_detail`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_common_zp_events_detail`;
--	create table  `gzdw2024.fbgame_01_basic.dws_common_zp_events_detail`
	--PARTITION BY event_date as 
	SELECT
		* 
	FROM `gzdw2024.fbgame_01_basic.dws_common_game_events_detail`
	WHERE 1=1
	and event_date>=date_add(run_date,interval -history_day day)
	and event_date<=date_add(run_date,interval -history_end_day day)
	and package_name='fb.zp';



------5.3 oho事件明细
delete `gzdw2024.fbgame_01_basic.dws_common_oho_events_detail`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);

insert `gzdw2024.fbgame_01_basic.dws_common_oho_events_detail`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_common_oho_events_detail`;
	--create table  `gzdw2024.fbgame_01_basic.dws_common_oho_events_detail`
	--PARTITION BY event_date as 
	SELECT
		* 
	FROM `gzdw2024.fbgame_01_basic.dws_common_game_events_detail`
	WHERE 1=1
	and event_date>=date_add(run_date,interval -history_day day)
	and event_date<=date_add(run_date,interval -history_end_day day)
	and package_name='fb.ai.avatar.puzzle';



------5.4 fruit事件明细
delete `gzdw2024.fbgame_01_basic.dws_common_fruit_events_detail`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);

insert `gzdw2024.fbgame_01_basic.dws_common_fruit_events_detail`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_common_fruit_events_detail`;
	--create table  `gzdw2024.fbgame_01_basic.dws_common_fruit_events_detail`
	--PARTITION BY event_date as 
	SELECT
		* 
	FROM `gzdw2024.fbgame_01_basic.dws_common_game_events_detail`
	WHERE 1=1
	and event_date>=date_add(run_date,interval -history_day day)
	and event_date<=date_add(run_date,interval -history_end_day day)
	and package_name='fb.fruit.bubble';



-------6.1泡泡龙通关报告-分布
delete `gzdw2024.fbgame_01_basic.dws_bubble_level_finish_distribution_report`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);


insert `gzdw2024.fbgame_01_basic.dws_bubble_level_finish_distribution_report`
--	drop table if exists `gzdw2024.fbgame_01_basic.dws_bubble_level_finish_distribution_report`;
--create table  `gzdw2024.fbgame_01_basic.dws_bubble_level_finish_distribution_report`
--	PARTITION BY event_date as 
	with a  
		as (
		SELECT
			event_date
			,user_id
			,package_name
			,platform
			,country_code
			,level_id
			,is_new
			,score
			,steps
			,starsum
			,time_min
		FROM
			(
			SELECT
				a.event_date
				,a.package_name
				,a.user_id 
				,event_name
				,platform
				,country_code
				,ARRAY['TOTAL',case when is_new =1 then 'new'
				when is_new =0 then 'old' 
				else 'old' end] as is_new
        		,level_id
				,CASE 
				    WHEN score < 6000 THEN 'a_0_6000'
				    WHEN score >= 6000 AND score < 7000 THEN 'b_6000_7000'
				    WHEN score >= 7000 AND score < 8000 THEN 'c_7000_8000'
				    WHEN score >= 8000 AND score < 10000 THEN 'd_8000_10000'
				    WHEN score >= 10000 AND score < 12000 THEN 'e_10000_12000'
				    WHEN score >= 12000 THEN 'f_12000'
				END AS score
				,CASE 
				    WHEN steps < 10 THEN 'a_0_10'
				    WHEN steps >= 10 AND steps < 20 THEN 'b_10_20'
				    WHEN steps >= 20 AND steps < 30 THEN 'c_20_30'
				    WHEN steps >= 30 AND steps < 40 THEN 'd_30_40'
				    WHEN steps >= 40 AND steps < 50 THEN 'e_40_50'
				    WHEN steps >= 50 THEN 'f_50'
				END AS steps
				,CASE 
				    WHEN starsum >= 1 AND starsum < 2 THEN 'a_1'
				    WHEN starsum >= 2 AND starsum < 3 THEN 'b_2'
				    WHEN starsum >= 3 AND starsum < 4 THEN 'c_3'
				    WHEN starsum >= 4  AND starsum < 5 THEN 'd_4'
				    WHEN starsum >= 5 THEN 'e_5'
				END AS starsum
				,CASE 
				    WHEN time_min < 0.5 THEN 'a_0_30'
				    WHEN time_min >= 0.5 AND time_min < 1 THEN 'b_30_60'
				    WHEN time_min >= 1 AND time_min < 1.5 THEN 'c_60_90'
				    WHEN time_min >= 1.5 AND time_min < 2 THEN 'd_90_120'
				    WHEN time_min >= 2 AND time_min < 3 THEN 'e_120_180'
				    WHEN time_min >= 3 THEN 'f_180'
				END AS time_min	
			FROM
				(
				SELECT
					 event_date
					,user_id
					,ARRAY['TOTAL',country_code] as country_code
					,array[case when operating_system ='iOS' then 'iOS'
					when operating_system ='Android' then 'Android' 
					else 'web' end,'TOTAL']  as platform						
					,package_name
					,event_name
					,array['TOTAL',CASE when level_id is null then 'other' else level_id end ] as level_id
					,safe_cast(score as int64) as score
					,safe_cast(steps as int64) as steps
					,safe_cast(starsum as int64) as starsum
					,safe_cast(timeuse as int64)/1000/60 as time_min
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`  
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				and event_name in ('fb_fruit_game_play_finish')
				--and package_name in ('fb.fruit.bubble')
				
				)a 
			 left	join 
				(
				SELECT
					package_name
					,event_date
					,user_id
					,max(is_new) as is_new
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				group by event_date,user_id,package_name
			   )b 
				on a.user_id=b.user_id
				and a.package_name=b.package_name
				and a.event_date=b.event_date
				,UNNEST(platform) AS platform
				,UNNEST(country_code) AS country_code
			)c 
			,UNNEST(is_new) AS is_new
			,UNNEST(level_id) as level_id
		) 
		 SELECT
				   event_date
				    ,package_name
				    ,platform
				    ,country_code
				    ,is_new
				    ,level_id
				    ,key_value.key AS event_key        
				    ,key_value.value AS event_value
				    ,count(1) as event_num
				    ,COUNT(DISTINCT user_id) AS user_num
				  FROM
				    a,
				    UNNEST([
				      STRUCT('score' AS key, score AS value),
				      STRUCT('steps' AS key, steps AS value),
				      STRUCT('starsum' AS key, starsum AS value),
				      STRUCT('time_min' AS key, time_min AS value)
				    ]) AS key_value
				  GROUP BY  event_date, event_key, event_value,package_name,country_code,platform,is_new,level_id;
		





-------6.2泡泡龙通关报告-中位与均值
delete `gzdw2024.fbgame_01_basic.dws_bubble_level_finish_report`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);


insert `gzdw2024.fbgame_01_basic.dws_bubble_level_finish_report`
--	drop table if exists `gzdw2024.fbgame_01_basic.dws_bubble_level_finish_report`;
--create table  `gzdw2024.fbgame_01_basic.dws_bubble_level_finish_report`
--	PARTITION BY event_date as 
	with a  
		as (
		SELECT
			event_date
			,user_id
			,package_name
			,platform
			,country_code
			,level_id
			,is_new
			,score
			,steps
			,starsum
			,time_min
			,PERCENTILE_CONT(score, 0.5) OVER(partition by event_date,package_name,platform,country_code,is_new,level_id) AS score_50
			,PERCENTILE_CONT(steps, 0.5) OVER(partition by event_date,package_name,platform,country_code,is_new,level_id) AS steps_50
			,PERCENTILE_CONT(starsum, 0.5) OVER(partition by event_date,package_name,platform,country_code,is_new,level_id) AS starsum_50
			,PERCENTILE_CONT(time_min, 0.5) OVER(partition by event_date,package_name,platform,country_code,is_new,level_id) AS time_min_50
		FROM
			(
			SELECT
				a.event_date
				,a.package_name
				,a.user_id 
				,event_name
				,platform
				,country_code
				,ARRAY['TOTAL',case when is_new =1 then 'new'
				when is_new =0 then 'old' 
				else 'old' end] as is_new
        		,level_id
				,score
				,steps
				,starsum
				,time_min	
			FROM
				(
				SELECT
					 event_date
					,user_id
					,ARRAY['TOTAL',country_code] as country_code
					,array[case when operating_system ='iOS' then 'iOS'
					when operating_system ='Android' then 'Android' 
					else 'web' end,'TOTAL']  as platform						
					,package_name
					,event_name
					,array['TOTAL',CASE when level_id is null then 'other' else level_id end ] as level_id
					,safe_cast(score as int64) as score
					,safe_cast(steps as int64) as steps
					,safe_cast(starsum as int64) as starsum
					,safe_cast(timeuse as int64)/1000/60 as time_min
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`  
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				and event_name in ('fb_fruit_game_play_finish')
				--and package_name in ('fb.fruit.bubble')
				
				)a 
			 left	join 
				(
				SELECT
					package_name
					,event_date
					,user_id
					,max(is_new) as is_new
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				group by event_date,user_id,package_name
			   )b 
				on a.user_id=b.user_id
				and a.package_name=b.package_name
				and a.event_date=b.event_date
				,UNNEST(platform) AS platform
				,UNNEST(country_code) AS country_code
			)c 
			,UNNEST(is_new) AS is_new
			,UNNEST(level_id) as level_id
		) 
 		 SELECT
		   event_date
		    ,package_name
		    ,platform
		    ,country_code
		    ,is_new
		    ,level_id
		   	,avg(score) as avg_score
			,avg(steps) as avg_steps
			,avg(starsum) as avg_starsum
			,avg(time_min) as avg_time_min		
			,max(score_50) as score_50
			,max(steps_50) as steps_50
			,max(starsum_50) as starsum_50
			,max(time_min_50) as time_min_50
			,count(1) as pv 
			,count(distinct user_id) as uv 
		  FROM
		    a
		  GROUP BY  event_date,package_name,country_code,platform,is_new,level_id;





-----6.3泡泡龙特殊事件计算
delete `gzdw2024.fbgame_01_basic.dws_bubble_game_select_event_active_report`
where stats_date>=date_add(run_date,interval -history_day day)
and stats_date<=date_add(run_date,interval -history_end_day day);


insert `gzdw2024.fbgame_01_basic.dws_bubble_game_select_event_active_report`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_bubble_game_select_event_active_report`;
--	create table  `gzdw2024.fbgame_01_basic.dws_bubble_game_select_event_active_report`
--	PARTITION BY stats_date as 
	SELECT
		c0.event_date  AS stats_date
		,c0.package_name
		,c0.platform
		,c0.country_code
		,is_new
		,event_name
		,pv 
		,uv 
		,case when is_new='TOTAL' then  active_uv  when is_new='new' then  new_uv
		when is_new='old' then active_uv -  new_uv end as active_uv
		,propselect_num
	FROM
		(
		SELECT
			event_date
			,package_name
			,platform
			,country_code
			,event_name
			,is_new
			,count(1) as pv 
			,count(distinct user_id) as uv 
			,sum(propselect_num) as propselect_num
		FROM
			(
			SELECT
				a.event_date
				,a.package_name
				,a.user_id 
				,event_name
				,platform
				,country_code
				,ARRAY['TOTAL',case when is_new =1 then 'new'
				when is_new =0 then 'old' 
				else 'old' end] as is_new	
				,propselect_num
			FROM
				(
			
				SELECT
					 event_date
					,user_id
					,ARRAY['TOTAL',country_code] as country_code
					,array[case when operating_system ='iOS' then 'iOS'
					when operating_system ='Android' then 'Android' 
					else 'web' end,'TOTAL']  as platform					
					,package_name
					,case when event_name='fb_fruit_shop_buyprop' then 'fb_fruit_shop_buyprop_succ'
						else event_name end as event_name
					,ARRAY_LENGTH(REGEXP_EXTRACT_ALL(propselect, r':1')) AS propselect_num
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`  
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				and (event_name in ('fb_fruit_level_page_click','fb_fruit_game_play_start' ) 
				     or (event_name='fb_fruit_shop_buyprop' and buytype='1'))
				)a 
			 left	join 
				(
				SELECT
					package_name
					,event_date
					,user_id
					,max(is_new) as is_new
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				group by event_date,user_id,package_name
			   )b 
				on a.user_id=b.user_id
				and a.package_name=b.package_name
				and a.event_date=b.event_date
				,UNNEST(platform) AS platform
				,UNNEST(country_code) AS country_code
				
				)c 
				,UNNEST(is_new) AS is_new
			group by event_date
			,package_name
			,platform
			,country_code
			,event_name
			,is_new
			)c0 
			left join
			(
			SELECT
				event_date
				,package_name
				,platform
				,country_code
				,active_uv
				,new_uv
			FROM	`gzdw2024.fbgame_01_basic.dws_common_game_user_active_report`
			WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)

			)c1 
			on c0.event_date=c1.event_date
			and c0.platform=c1.platform
			and c0.country_code=c1.country_code
			and c0.package_name=c1.package_name;



------6.4玩家资源统计-分布
delete `gzdw2024.fbgame_01_basic.dws_bubble_game_player_resource_distribution_report`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);


insert `gzdw2024.fbgame_01_basic.dws_bubble_game_player_resource_distribution_report`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_bubble_game_player_resource_distribution_report`;
--	create table  `gzdw2024.fbgame_01_basic.dws_bubble_game_player_resource_distribution_report`
--	PARTITION BY event_date as 
	with a  
		as (
		SELECT
			event_date
			,user_id
			,package_name
			,platform
			,country_code
			,coinsum
			,starsum
			,livesum
			,SteelBall
			,Bomb
			,MagicBall
			,AimLine
			,is_new
		FROM
			(
			SELECT
				a.event_date
				,a.user_id
				,a.package_name
				,platform
				,country_code	
				,case when coinsum<100 then 'a_0_100'
					when coinsum>=100 and coinsum<300 then 'b_100_300'
					when coinsum>=300 and coinsum<500 then 'c_300_500'
					when coinsum>=500 and coinsum<800 then 'd_500_800'
					when coinsum>=800 and coinsum<1200 then 'e_800_1200'
					when coinsum>=1200  then 'f_1200' end as coinsum
				,case when starsum<5 then 'a_0_5'
					when starsum>=5 and starsum<10 then 'b_5_10'
					when starsum>=10 and starsum<15 then 'c_10_15'
					when starsum>=15 and starsum<20 then 'd_15_20'
					when starsum>=20 and starsum<30 then 'e_20_30'
					when starsum>=30  then 'f_30' end as starsum
				,case when livesum<2 then 'a_0_2'
					when livesum>=2 and livesum<4 then 'b_2_4'
					when livesum>=4 and livesum<6 then 'c_4_6'
					when livesum>=6 and livesum<8 then 'd_6_8'
					when livesum>=8  then 'e_8'
					end as livesum
				,safe_cast(LEAST(SteelBall, 5) as string) AS SteelBall
				,safe_cast(LEAST(Bomb, 5) as string) AS Bomb
				,safe_cast(LEAST(MagicBall, 5) as string) AS MagicBall
				,safe_cast(LEAST(AimLine, 5) as string) AS AimLine

				,ARRAY['TOTAL',case when is_new =1 then 'new'
					when is_new =0 then 'old' 
					else 'old' end] as is_new

			FROM
				(
				SELECT
					 event_date
					,user_id					
					,package_name	
					,ARRAY['TOTAL',country_code] as country_code
					,array[case when operating_system ='iOS' then 'iOS'
					when operating_system ='Android' then 'Android' 
					else 'web' end,'TOTAL']  as platform	
					,safe_cast(coinsum as int64) as coinsum
					,safe_cast(starsum as int64) as starsum
					,safe_cast(livesum as int64) as livesum
					,proplist
					,event_timestamp
					,safe_cast(JSON_EXTRACT_SCALAR(proplist, '$.SteelBall') as int64)   AS SteelBall
					,safe_cast(JSON_EXTRACT_SCALAR(proplist, '$.Bomb')  as int64)  AS Bomb
					,safe_cast(JSON_EXTRACT_SCALAR(proplist, '$.MagicBall') as int64)   AS MagicBall
					,safe_cast(JSON_EXTRACT_SCALAR(proplist, '$.AimLine') as int64)   AS AimLine
					,row_number() over(partition by user_id,event_date,package_name order by event_timestamp desc ) as rn 
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`  
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				and event_name in ('fb_fruit_game_play_exit') 
				)a 
				 left	join 
				(
				SELECT
					package_name
					,event_date
					,user_id
					,max(is_new) as is_new
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				group by event_date,user_id,package_name
			   )b 
				on a.user_id=b.user_id
				and a.package_name=b.package_name
				and a.event_date=b.event_date
				where rn=1
			)c
			,UNNEST(country_code) as country_code
			,UNNEST(platform) as platform
			,UNNEST(is_new) as is_new
		) 
		 SELECT
				   event_date
				    ,package_name
				    ,platform
				    ,country_code
				    ,is_new
				    ,key_value.key AS event_key        
				    ,key_value.value AS event_value
				    ,count(1) as event_num
				    ,COUNT(DISTINCT user_id) AS user_num
				  FROM
				    a,
				    UNNEST([
				      STRUCT('coinsum' AS key, coinsum AS value),
				      STRUCT('starsum' AS key, starsum AS value),
				      STRUCT('livesum' AS key, livesum AS value),
				      STRUCT('SteelBall' AS key, SteelBall AS value),
				      STRUCT('Bomb' AS key, Bomb AS value),
				      STRUCT('MagicBall' AS key, MagicBall AS value),
				      STRUCT('AimLine' AS key, AimLine AS value)
				    ]) AS key_value
				  GROUP BY  event_date, event_key, event_value,package_name,country_code,platform,is_new;

				     

-------6.5玩家资源统计-中位数与平均
delete `gzdw2024.fbgame_01_basic.dws_bubble_game_player_resource_avg_med_report`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);


insert `gzdw2024.fbgame_01_basic.dws_bubble_game_player_resource_avg_med_report`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_bubble_game_player_resource_avg_med_report`;
--	create table  `gzdw2024.fbgame_01_basic.dws_bubble_game_player_resource_avg_med_report`
--	PARTITION BY event_date as 
	with a  
		as (
		SELECT
			event_date
			,user_id
			,package_name
			,platform
			,country_code
			,coinsum
			,starsum
			,livesum
			,SteelBall
			,Bomb
			,MagicBall
			,AimLine
			,is_new
			,PERCENTILE_CONT(coinsum, 0.5) OVER(partition by event_date,package_name,platform,country_code,is_new) AS coinsum_50
			,PERCENTILE_CONT(starsum, 0.5) OVER(partition by event_date,package_name,platform,country_code,is_new) AS starsum_50
			,PERCENTILE_CONT(livesum, 0.5) OVER(partition by event_date,package_name,platform,country_code,is_new) AS livesum_50
			,PERCENTILE_CONT(SteelBall, 0.5) OVER(partition by event_date,package_name,platform,country_code,is_new) AS SteelBall_50
			,PERCENTILE_CONT(Bomb, 0.5) OVER(partition by event_date,package_name,platform,country_code,is_new) AS Bomb_50
			,PERCENTILE_CONT(MagicBall, 0.5) OVER(partition by event_date,package_name,platform,country_code,is_new) AS MagicBall_50
			,PERCENTILE_CONT(AimLine, 0.5) OVER(partition by event_date,package_name,platform,country_code,is_new) AS AimLine_50
		FROM
			(
			SELECT
				a.event_date
				,a.user_id
				,a.package_name
				,platform
				,country_code	
	
				
				,coinsum
				,starsum
				,livesum
				,SteelBall
				,Bomb
				,MagicBall
				,AimLine
				,ARRAY['TOTAL',case when is_new =1 then 'new'
					when is_new =0 then 'old' 
					else 'old' end] as is_new				
			FROM
				(
				SELECT
					 event_date
					,user_id					
					,package_name	
					,ARRAY['TOTAL',country_code] as country_code
					,array[case when operating_system ='iOS' then 'iOS'
					when operating_system ='Android' then 'Android' 
					else 'web' end,'TOTAL']  as platform	
					,safe_cast(coinsum as int64) as coinsum
					,safe_cast(starsum as int64) as starsum
					,safe_cast(livesum as int64) as livesum
					,proplist
					,event_timestamp
					,safe_cast(JSON_EXTRACT_SCALAR(proplist, '$.SteelBall') as int64)   AS SteelBall
					,safe_cast(JSON_EXTRACT_SCALAR(proplist, '$.Bomb')  as int64)  AS Bomb
					,safe_cast(JSON_EXTRACT_SCALAR(proplist, '$.MagicBall') as int64)   AS MagicBall
					,safe_cast(JSON_EXTRACT_SCALAR(proplist, '$.AimLine') as int64)   AS AimLine
					,row_number() over(partition by user_id,event_date,package_name order by event_timestamp desc ) as rn 
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`  
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				and event_name in ('fb_fruit_game_play_exit') 
				)a 
				 left	join 
				(
				SELECT
					package_name
					,event_date
					,user_id
					,max(is_new) as is_new
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				group by event_date,user_id,package_name
			   )b 
				on a.user_id=b.user_id
				and a.package_name=b.package_name
				and a.event_date=b.event_date
				where rn=1
			)c
			,UNNEST(country_code) as country_code
			,UNNEST(platform) as platform
			,UNNEST(is_new) as is_new
		) 
		 SELECT
		   event_date
		    ,package_name
		    ,platform
		    ,country_code
		    ,is_new
		   	,avg(coinsum) as avg_coinsum
			,avg(starsum) as avg_starsum
			,avg(livesum) as avg_livesum
			,avg(SteelBall) as avg_SteelBall
			,avg(Bomb) as avg_Bomb
			,avg(MagicBall) as avg_MagicBall
			,avg(AimLine) as avg_AimLine
			,max(coinsum_50) as coinsum_50
			,max(starsum_50) as starsum_50
			,max(livesum_50) as livesum_50
			,max(SteelBall_50) as SteelBall_50
			,max(Bomb_50) as Bomb_50
			,max(MagicBall_50) as MagicBall_50
			,max(AimLine_50) as AimLine_50
			,sum(coinsum) as sum_coinsum
			,sum(starsum) as sum_starsum
			,sum(livesum) as sum_livesum
			,sum(SteelBall) as sum_SteelBall
			,sum(Bomb) as sum_Bomb
			,sum(MagicBall) as sum_MagicBall
			,sum(AimLine) as sum_AimLine
			,count(1) as pv 
			,count(distinct user_id) as uv 
		  FROM
		    a
		  GROUP BY  event_date,package_name,country_code,platform,is_new;







-------6.6泡泡龙会话次数分布
delete `gzdw2024.fbgame_01_basic.dws_bubble_game_lanuch_finish_pv_report`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);


insert `gzdw2024.fbgame_01_basic.dws_bubble_game_lanuch_finish_pv_report`
	--drop table if exists  `gzdw2024.fbgame_01_basic.dws_bubble_game_lanuch_finish_pv_report`;
--create table  `gzdw2024.fbgame_01_basic.dws_bubble_game_lanuch_finish_pv_report`
--	PARTITION BY event_date as 
			with a as (
				SELECT
					event_date
					,package_name
					,user_id
					,platform
					,country_code
					,is_new
					,CASE WHEN launch_pv>=8 then 8 else launch_pv end as launch_pv
					,CASE WHEN start_pv>=8 then 8 else start_pv end as start_pv
					,CASE WHEN finsh_pv>=8 then 8 else finsh_pv end as finsh_pv
				FROM 
					(
					SELECT
						a.event_date
						,a.package_name
						,a.user_id 
						,platform
						,country_code
						,is_new
						,max(case when event_name='fb_fruit_app_launch' then pv else 0 end) as launch_pv
						,max(case when event_name='fb_fruit_game_play_start' then pv else 0 end) as start_pv
						,max(case when event_name='fb_fruit_game_play_finish' then pv else 0 end) as finsh_pv
					FROM
						(
						SELECT
							 event_date
							,user_id
							,ARRAY['TOTAL',country_code] as country_code
							,array[case when operating_system ='iOS' then 'iOS'
							when operating_system ='Android' then 'Android' 
							else 'web' end,'TOTAL']  as platform						
							,package_name
							,ARRAY['TOTAL',case when is_new =1 then 'new'
								when is_new =0 then 'old' 
								else 'old' end] as is_new
						FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`  
						WHERE event_date>=date_add(run_date,interval -history_day day)
						and event_date<=date_add(run_date,interval -history_end_day day)
						and package_name in ('fb.fruit.bubble')
						and is_launch=1			
						)a 
						left join
						(
						SELECT
							 event_date
							,user_id									
							,package_name
							,event_name
							,count(1) as pv 
						FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`  
						WHERE event_date>=date_add(run_date,interval -history_day day)
						and event_date<=date_add(run_date,interval -history_end_day day)
						and event_name in ('fb_fruit_app_launch','fb_fruit_game_play_finish','fb_fruit_game_play_start')
						and package_name in ('fb.fruit.bubble')
						group by  event_date,user_id,package_name,event_name
						)c 
						on a.user_id=c.user_id
						and a.package_name=c.package_name
						and a.event_date=c.event_date
						,UNNEST(platform) AS platform
						,UNNEST(country_code) AS country_code
						,UNNEST(is_new) AS is_new
						group by event_date,platform,country_code,package_name,is_new,user_id
						)d
					)
				  SELECT
				   event_date
				    ,package_name
				    ,platform
				    ,country_code
				    ,is_new
				    ,key_value.key AS event_key        
				    ,key_value.value AS event_value
				    ,count(1) as pv
				    ,COUNT(DISTINCT user_id) AS user_num
				  FROM
				    a,
				    UNNEST([
				      STRUCT('launch' AS key, launch_pv AS value),
				      STRUCT('start' AS key, start_pv AS value),
				      STRUCT('finsh' AS key, finsh_pv AS value)
				    ]) AS key_value
				  GROUP BY  event_date, event_key, event_value,package_name,country_code,platform,is_new;


-----------6.7泡泡龙游戏与会话时长分布
delete `gzdw2024.fbgame_01_basic.dws_bubble_game_finish_time_report`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);


insert `gzdw2024.fbgame_01_basic.dws_bubble_game_finish_time_report`
	--drop table if exists  `gzdw2024.fbgame_01_basic.dws_bubble_game_finish_time_report`;
--create table  `gzdw2024.fbgame_01_basic.dws_bubble_game_finish_time_report`
	--PARTITION BY event_date as 
	with a as (
		SELECT
			package_name
			,user_id
			,country_code
			,platform
			,event_name
			,event_date
			,is_new
			,SUM(timeuse) AS timeuse
			,SUM(gameShowTime) AS gameShowTime
		FROM
			(
			SELECT
				a.package_name
				,a.user_id
				,country_code
				,platform
				,event_name
				,a.event_date
				,timeuse
				,gameShowTime
				,ARRAY['TOTAL',case when is_new =1 then 'new'
								when is_new =0 then 'old' 
								else 'old' end] as is_new
			FROM
				(
				SELECT
					package_name
					,user_id
					,ARRAY['TOTAL',country_code] as country_code
					,array[case when operating_system ='iOS' then 'iOS'
						when operating_system ='Android' then 'Android' 
						else 'web' end,'TOTAL']  as platform	
					,safe_cast(timeuse as int)/1000/60 as timeuse
					,safe_cast(gameShowTime as int)/1000/60 as gameShowTime
					,event_date
					,event_name
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`  	a
				WHERE event_name in ('fb_fruit_game_play_finish')
				and event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				)a 
				 left	join 
				(
				SELECT
					package_name
					,event_date
					,user_id
					,max(is_new) as is_new
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				group by event_date,user_id,package_name
			   )b 
				on a.user_id=b.user_id
				and a.package_name=b.package_name
				and a.event_date=b.event_date
			
			)c 
			,UNNEST(is_new) AS is_new
			,UNNEST(platform) AS platform
			,UNNEST(country_code) AS country_code
			group by  package_name
				,user_id
				,country_code
				,platform
				,event_name
				,event_date
				,is_new
		),

	b as (	SELECT
			package_name
			,user_id
			,country_code
			,platform
			,event_name
			,event_date
			,is_new
			,case when timeuse<1 then 1  
				when timeuse>=1 and timeuse<2 then 2
				when timeuse>=2 and timeuse<3 then 3
				when timeuse>=3 and timeuse<4 then 4
				when timeuse>=4 and timeuse<5 then 5
				when timeuse>=5  then 6 end as timeuse
			,avg(timeuse)  over(partition by package_name,country_code,platform,is_new,event_date) as avg_timeuse
			,PERCENTILE_CONT(timeuse,0.5)  over(partition by package_name,country_code,platform,is_new,event_date) as med_timeuse
		FROM a  
		where 1=1 
		and event_name='fb_fruit_game_play_finish' 
		and timeuse<60
		)
		SELECT
			package_name
			,event_date
			,country_code
			,platform
			,is_new
			,timeuse
			,count(1) as pv
			,COUNT(DISTINCT user_id) as uv 
			,max(avg_timeuse) as avg_timeuse
		    ,max(med_timeuse) as med_timeuse
		FROM b 
		group BY package_name,event_date,country_code,platform,is_new,timeuse;
				

-------6.8泡泡龙游戏时长分布
delete `gzdw2024.fbgame_01_basic.dws_bubble_game_time_report`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);


insert `gzdw2024.fbgame_01_basic.dws_bubble_game_time_report`
	--drop table if exists  `gzdw2024.fbgame_01_basic.dws_bubble_game_time_report`;
--create table  `gzdw2024.fbgame_01_basic.dws_bubble_game_time_report`
	--PARTITION BY event_date as 
	with a as (
		SELECT
			package_name
			,user_id
			,country_code
			,platform
			,event_name
			,event_date
			,is_new
			,SUM(timeuse) AS timeuse
			,SUM(gameShowTime) AS gameShowTime
		FROM
			(
			SELECT
				a.package_name
				,a.user_id
				,country_code
				,platform
				,event_name
				,a.event_date
				,timeuse
				,gameShowTime
				,ARRAY['TOTAL',case when is_new =1 then 'new'
								when is_new =0 then 'old' 
								else 'old' end] as is_new
			FROM
				(
				SELECT
					package_name
					,user_id
					,ARRAY['TOTAL',country_code] as country_code
					,array[case when operating_system ='iOS' then 'iOS'
						when operating_system ='Android' then 'Android' 
						else 'web' end,'TOTAL']  as platform	
					,safe_cast(timeuse as int)/1000/60 as timeuse
					,safe_cast(gameShowTime as int)/1000/60 as gameShowTime
					,event_date
					,event_name
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`  	a
				WHERE event_name in ('fb_fruit_game_play_exit')
				and event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				)a 
				 left	join 
				(
				SELECT
					package_name
					,event_date
					,user_id
					,max(is_new) as is_new
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				group by event_date,user_id,package_name
			   )b 
				on a.user_id=b.user_id
				and a.package_name=b.package_name
				and a.event_date=b.event_date
			
			)c 
			,UNNEST(is_new) AS is_new
			,UNNEST(platform) AS platform
			,UNNEST(country_code) AS country_code
			group by  package_name
				,user_id
				,country_code
				,platform
				,event_name
				,event_date
				,is_new
		),

	b as (	SELECT
			package_name
			,user_id
			,country_code
			,platform
			,event_name
			,event_date
			,is_new
			,case when gameShowTime<1 then 'a_0_1_min'
				when gameShowTime>=1 and gameShowTime<3 then 'b_1_3_min'
				when gameShowTime>=3 and gameShowTime<5 then 'c_3_5_min'
				when gameShowTime>=5 and gameShowTime<10 then 'd_5_10_min'
				when gameShowTime>=10 and gameShowTime<20 then 'e_10_20_min'
				when gameShowTime>=20 and gameShowTime<30 then 'f_20_30_min'
				when gameShowTime>=30 and gameShowTime<60 then 'g_30_60_min'
				when gameShowTime>=60  then 'h_60_min' end as gameShowTime
				,avg(gameShowTime)  over(partition by package_name,country_code,platform,is_new,event_date) as avg_gameShowTime
				,PERCENTILE_CONT(gameShowTime,0.5)  over(partition by package_name,country_code,platform,is_new,event_date) as med_gameShowTime
		FROM a  
		where 1=1 
		and event_name='fb_fruit_game_play_exit' 
		and gameShowTime<120
		)
		SELECT
			package_name
			,event_date
			,country_code
			,platform
			,is_new
			,gameShowTime
			,count(1) as pv
			,COUNT(DISTINCT user_id) as uv 
			,max(avg_gameShowTime) as avg_gameShowTime
			,max(med_gameShowTime) as med_gameShowTime
		FROM b 
		group BY package_name,event_date,country_code,platform,is_new,gameShowTime;



------6.9.1商店购买道具-分布
delete `gzdw2024.fbgame_01_basic.dws_bubble_game_prop_sale_report`
where event_date>=date_add(run_date,interval -history_day day)
and event_date<=date_add(run_date,interval -history_end_day day);


insert `gzdw2024.fbgame_01_basic.dws_bubble_game_prop_sale_report`
--drop table if exists  `gzdw2024.fbgame_01_basic.dws_bubble_game_prop_sale_report`;
	--create table  `gzdw2024.fbgame_01_basic.dws_bubble_game_prop_sale_report`
	--PARTITION BY event_date as 
	with a  
		as (
		SELECT
			event_date
			,user_id
			,package_name
			,platform
			,country_code
			,is_new
			,proptype
			,propsum
			,PERCENTILE_CONT(propsum, 0.5) OVER(partition by event_date,package_name,platform,country_code,proptype,is_new) AS propsum_50
		FROM
			(
			SELECT
				a.event_date
				,a.user_id
				,a.package_name
				,platform
				,country_code	
				,propsum
				,ARRAY['TOTAL',case when is_new =1 then 'new'
					when is_new =0 then 'old' 
					else 'old' end] as is_new
				,ARRAY['TOTAL',proptype] as proptype

			FROM
				(
				SELECT
					 event_date
					,user_id					
					,package_name	
					,ARRAY['TOTAL',country_code] as country_code
					,array[case when operating_system ='iOS' then 'iOS'
					when operating_system ='Android' then 'Android' 
					else 'web' end,'TOTAL']  as platform	
					,proptype
					,safe_cast(propsum as int64) as propsum
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_event_di`  
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				and event_name in ('fb_fruit_shop_buyprop')
				and buytype='1'
				)a 
				 left	join 
				(
				SELECT
					package_name
					,event_date
					,user_id
					,max(is_new) as is_new
				FROM `gzdw2024.fbgame_01_basic.dwd_common_game_user_active_profile_di`
				WHERE event_date>=date_add(run_date,interval -history_day day)
				and event_date<=date_add(run_date,interval -history_end_day day)
				group by event_date,user_id,package_name
			   )b 
				on a.user_id=b.user_id
				and a.package_name=b.package_name
				and a.event_date=b.event_date
			)c
			,UNNEST(country_code) as country_code
			,UNNEST(platform) as platform
			,UNNEST(is_new) as is_new
			,UNNEST(proptype) as proptype
		) 
		 SELECT
				   event_date
				    ,package_name
				    ,platform
				    ,country_code
				    ,is_new
				  	,proptype
				  	,avg(propsum) as propsum_avg
				  	,sum(propsum) as propsum_sum
				  	,max(propsum) as propsum_med
				  	,count(1) as pv 
				    ,COUNT(DISTINCT user_id) AS user_num
				  FROM
				    a
				  GROUP BY  event_date, proptype,package_name,country_code,platform,is_new;

				     

end;
